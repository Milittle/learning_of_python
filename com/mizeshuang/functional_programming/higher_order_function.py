# 用实际的代码进行阐述
# 变量可以指向函数,这里使用自带函数abs进行测试
f = abs
b = f(-1)
print(b)
# 这说明一个现象就是，函数名也可以赋值给一个变量，调用这个变量和调用函数的功能是一致的

# 函数名也是变量
# 如果把abs指向其他变量，那么会发生什么呢？

#abs = 10
print(abs(-1))# 那么他就会报错，因为现在abs是一个int型变量
# 注：由于abs函数实际上是定义在import builtins模块中的，所以要让修改abs变量的指向在其它模块也生效，
# 要用import builtins; builtins.abs = 10。


# 传入函数
# 既然变量可以指向函数，函数的参数可以接受变量，那么，一个函数也就能接收另一个函数作为参数了，这种函数就叫做高阶函数
def add(x,y,f):
    return f(x) + f(y)
# 调用
x = -5
y = 9
f = abs
print(add(x,y,f))

# 编写高阶函数，就是让函数的参数能够接收别的函数
# 把函数作为参数传入，这样的函数就是告诫函数，函数式编程就是之这种高度抽象的编程范式